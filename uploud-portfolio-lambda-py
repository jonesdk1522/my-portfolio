import json
import boto3
import zipfile
import StringIO
import mimetypes

testing
def lambda_handler(event, context):
    sns = boto3.resource('sns')
    topic = sns.Topic('arn:aws:sns:us-east-1:194655109073:PortfolioDeployment')

    location = {
        "bucketName": 'build.network-legends.com',
        "objectKey": 'BuildPortfolio.zip'
    }

    try:
        job = event.get("CodePipeline.job")

        if job:
            for artifact in job["data"]["inputArtifacts"]:
                if artifact["name"] == "BuildArtifact":
                    location = artifact["location"]["s3Location"]

        print "Building portfolio from " + str(location)

        s3 = boto3.resource('s3')

        portfolio_bucket = s3.Bucket('network-legends.com')
        build_bucket = s3.Bucket('build.network-legends.com')

        BuildPortfolio_zip = StringIO.StringIO()
        build_bucket.download_fileobj('BuildPortfolio.zip', BuildPortfolio_zip)

        with zipfile.ZipFile(BuildPortfolio_zip) as myzip:
                 for nm in myzip.namelist():
                     obj = myzip.open(nm)
                     mime_type = mimetypes.guess_type(nm)[0]
                     if mime_type is None: portfolio_bucket.upload_fileobj(obj, nm)
                     else: portfolio_bucket.upload_fileobj(obj, nm,
                        ExtraArgs={'ContentType': str(mime_type)})
                     portfolio_bucket.Object(nm).Acl().put(ACL='public-read')

        print "Job done!"
        topic.publish(Subject="Portfolio Update Deployed Successfully", Message="Portfolio deployed successfully!")
        if job:
            codepipeline = boto3.client('codepipeline')
            codepipeline.put_job_success_result(jobId=job["id"])
    except:
        topic.publish(Subject="Portfolio Update Failed", Message="Please check settings of code and redeploy")
        raise

    return 'Hello from Lambda'
